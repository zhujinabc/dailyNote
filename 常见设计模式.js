//1.单例模式
class Singeton {
  constructor(name, age) {
    if (!Singeton.instance) {
      this.name = name;
      this.age = age;
      Singeton.instance = this;
    }
    return Singeton.instance;
  }
}

//*2.观察者模式
/* 观察者模式：是观察者（observer）直接订阅（subscribe）被观察者（subject）,当被观察者发生变化时，会触发观察者中的事件 */
/* 应用：react的状态管理库，redux或者mobx之类的，组件可以作为观察者，store作为被观察者 */

//*3.发布订阅模式
/* 发布订阅模式：订阅者将事件注册到事件中心，当发布者发布时间也就是出发事件的时候，由事件中心调用订阅者注册的代码 */
/* 应用：事件发布订阅系统 */

/* 观察者模式和发布订阅模式的区别
    1.观察者模式只有两个角色，观察者和被观察者， 而发布订阅模式除了发布者和订阅者还有个经纪人的角色
    2.观察者模式是松耦合形式，而发布订阅模式，发布者和订阅者则是完全解耦的
    3.观察者模式一般是应用内部使用，发布订阅模式则多用在跨应用场景
*/

//4.工厂模式
/*  */
//5.装饰器模式
/* 装饰器模式：装饰模式是在不必改变原类和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象 */
